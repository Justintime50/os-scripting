#!/bin/bash

## DEPLOY PERSONAL MAC
## Can be used for MacBook or Server

main() {
    { # Wrap script in error logging
        prompt_for_password
        install_command_line_tools
        install_homebrew
        install_git
        install_composer
        install_dotfiles
        install_brewfile
    } 2> ~/deploy_script.log # End error logging wrapper

    cleanup
}

prompt_for_password() {
    # Gather necessary input
    echo -n "Admin Password: "
    read -rs PASSWORD
}

install_command_line_tools() {
    # Install Command Line Tools
    xcode-select --install
}

install_homebrew() {
    # Install Homebrew
    echo "$PASSWORD" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

install_git() {
    # Install Git
    brew install git
    mkdir -p "$HOME"/git
    mkdir -p "$HOME"/git/personal
}

install_composer() {
    # Install Composer for PHP package management
    curl -sS https://getcomposer.org/installer | php
    echo "$PASSWORD" | sudo -S mv composer.phar composer
    echo "$PASSWORD" | sudo -S mv composer /usr/local/bin/
    echo "$PASSWORD" | sudo -S chmod 755 /usr/local/bin/composer

    # Install Laravel Globally
    composer global require laravel/installer
}

install_dotfiles() {
    # Install dotfiles
    git clone https://github.com/Justintime50/dotfiles.git "$HOME/.dotfiles"
    cd "$HOME/.dotfiles" && git submodule init && git submodule update
    echo ". $HOME/.dotfiles/dots/src/dots.sh" >> "$HOME/.zshrc"
    . "$HOME/.zshrc" && DOTFILES_URL="https://github.com/Justintime50/dotfiles.git" dots_sync
}

install_brewfile() {
    # Install packages from Brewfile (generated by Alchemist)
    if [[ "$HOSTNAME" == "MacBook-Pro-Justin" ]] ; then
        brew bundle --file "$HOME/.dotfiles/src/personal/Brewfile"
    elif [[ "$HOSTNAME" == "Server" ]] ; then
        brew bundle --file "$HOME/.dotfiles/src/server/Brewfile"
    else
        echo "HOSTNAME doesn't match any config for Brewfile installation."
    fi
}

cleanup() {
    # Check for updates and restart
    echo "$PASSWORD" | sudo -S softwareupdate -i -a
    open ~/deploy_script.log # Open the log and have the user check for errors before finishing
    echo -e "Script complete.\nPlease check error log (automatically opened) before restarting.\n\nPress <enter> to restart."
    read -rn 1
    echo "Shutting down..."
    sleep 5
    history -c
    echo "$PASSWORD" | sudo -S shutdown -h now
}

main
